package Astro::Coord::ECI::VSOP87D::[% body %];

use 5.008;

use strict;
use warnings;

use base qw{ Astro::Coord::ECI };

use Astro::Coord::ECI::Mixin qw{
    almanac almanac_hash next_quarter next_quarter_hash
};
use Astro::Coord::ECI::VSOP87D qw{ :mixin };

use Carp;

our $VERSION = '0.000_01';

sub __almanac_event_type_iterator {
    my ( $self, $station ) = @_;

    my $inx = 0;

    my $horizon = $station->__get_almanac_horizon();

    my @events = (
	[ $station, next_elevation => [ $self, $horizon, 1 ], 'horizon',
		[ '[% body %] set', '[% body %] rise' ] ],
	[ $station, next_meridian => [ $self ], 'transit',
		[ undef, '[% body %] transits meridian' ] ],
	# TODO elongation?
    );

    return sub {
	$inx < @events
	    and return @{ $events[$inx++] };
	return;
    };
}

sub __model_definition {
    my ( undef, $key ) = @_;
    return [% model %]->{$key};
}

1;

__END__

=head1 NAME

Astro::Coord::ECI::VSOP87D::[% body %] - VSOP87D model of the position of [% body %]

=head1 SYNOPSIS

 use Astro::Coord::ECI::VSOP87D::[% body %];
 use Astro::Coord::ECI::Utils qw{ deg2rad };
 use POSIX qw{ strftime };
 use Time::Local qw{ localtime };
 
 my $station = Astro::Coord::ECI->new(
     name => 'White House',
 )->geodetic(
     deg2rad( 38.899 ),  # radians
     deg2rad( -77.038 ), # radians
     16.68/1000,         # Kilometers
 );
 my $venus = Astro::Coord::ECI::VSOP87D::[% body %]->new(
     station => $station,
 );
 my $today = timelocal( 0, 0, 0, ( localtime )[ 3 .. 5 ] );
 foreach my $item ( $venus->almanac( $today, $today + 86400 ) ) {
     local $\ = "\n";
     print strftime( '%d-%b-%Y %H:%M:%S', localtime $item->[0] ),
         $item->[3];
 }

=head1 DESCRIPTION

This Perl class computes the position of the [% body %] using the VSOP87D
model. It is a subclass of L<Astro::Coord::ECI|Astro::Coord::ECI>.

=head1 METHODS

This class supports the following public methods in addition to those of
its superclass:

=head2 model_cutoff

 say $self->model_cutoff()
 $self->model_cutoff( 'Meeus' );

When called with an argument, this method is a mutator, changing the
model cutoff value. When called without an argument, this method is an
accessor, returning the current model cutoff value.

The model cutoff value specifies how to truncate the calculation. Valid values
are:

=over

=item C<'none'> specifies no model cutoff (i.e. the full series);

=item C<'Meeus'> specifies the Meeus Appendix III series.

=back

The default is C<'Meeus'>.

=head2 model_cutoff_definition

This method reports, creates, and deletes model cutoff definitions.

The first argument is the name of the model cutoff. If this is the only
argument, a reference to a hash defining the named model cutoff is returned.
This return is a deep clone of the actual definition.

If the second argument is C<undef>, the named model cutoff is deleted. If the
model cutoff does not exist, the call does nothing. It is an error to try to
delete built-in cutoffs C<'none'> and C<'Meeus'>.

If the second argument is a reference to a hash, this defines or
redefines a model cutoff. The keys to the hash are the names of VSOP87D series
(C<'L0'> through C<'L5'>, C<'B0'> through C<'B5'>, and C<'R0'> through
C<'R5'>), and the value of each key is the number of terms of that
series to use. If one of the keys is omitted or has a false value, that
series is not used.

=head2 nutation

 my ( $delta_psi, $delta_epsilon ) =
     $self->nutation( $dynamical_time, $cutoff );

This subroutine (B<not> method) calculates the nutation in ecliptic
longitude (C<$delta_psi>) and latitude (C<$delta_epsilon>) at the given
dynamical time in seconds since the epoch (i.e. Perl time), according to
the IAU 1980 model.

The C<$time> argument is optional, and defaults to the object's current
dynamical time.

The C<$cutoff> argument is optional; if specified as a number larger
than C<0>, terms whose amplitudes are smaller than the model cutoff (in
milli arc seconds) are ignored. The Meeus version of the algorithm is
specified by a value of C<3>. The default is specified by the
L<nutation_cutoff()|/nutation_cutoff> value.

The model itself comes from Meeus chapter 22. The model parameters were
not transcribed from that source, however, but were taken from the
source IAU C reference implementation of the algorithm, F<src/nut80.c>,
with the minimum modifications necessary to make the C code into Perl
code. This file is contained in
L<http://www.iausofa.org/2018_0130_C/sofa_c-20180130.tar.gz>.

=head2 nutation_cutoff

 say $self->nutation_cutoff()
 $self->nutation_cutoff( 3 );

When called with an argument, this method is a mutator, changing the
nutation_cutoff value. When called without an argument, this method is
an accessor, returning the current nutation_cutoff value.

The nutation_cutoff value specifies how to truncate the nutation
calculation. All terms whose magnitudes are less than the nutation
cutoff are ignored. The value is in terms of 0.0001 seconds of arc, and
must be a non-negative number.

The default is C<3>, which is the value Meeus uses.

This value is also available via the
L<Astro::Coord::ECI|Astro::Coord::ECI> C<get()> and C<set()> methods.

=head2 obliquity

 $epsilon = $self->obliquity( $time );

This method calculates the obliquity of the ecliptic in radians at
the given B<dynamical> time. If the time is omitted or specified as
C<undef>, the current dynamical time of the object is used.

The algorithm is equation 22.3 from Jean Meeus' "Astronomical
Algorithms", 2nd Edition, Chapter 22, pages 143ff.

=head2 order

 say 'Order from Sun: ', $self->order();

This method returns the order of the body from the Sun, with the Sun
itself being C<0>. The number C<3> is skipped, since that would
represent the Earth.

=head2 period

 $self->period()

This method returns the sidereal period of the object, calculated from
the coefficient of its first C<L1> term.

The algorithm is the author's, and is a first approximation. That is. it
is just the tropical period plus however long it takes the object to
cover the amount of precession during the tropical year.

=head2 time_set

 $self->time_set()

This method is not normally called by the user. It is called by
L<Astro::Coord::ECI|Astro::Coord::ECI> to compute the position once the
time has been set.

It returns the invocant.

=head2 year

 $self->year()

This method returns the length of the tropical year of the object,
calculated from the coefficient of its first C<L1> term.

=head1 SEE ALSO

L<Astro::Coord::ECI|Astro::Coord::ECI>

L<Astro::Coord::ECI::VSOP87D|Astro::Coord::ECI::VSOP87D>

=head1 SUPPORT

Support is by the author. Please file bug reports at
L<http://rt.cpan.org>, or in electronic mail to the author.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) [% year %] by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
